from keras.applications.resnet50 import ResNet50
from keras.preprocessing import image
from keras.applications.resnet50 import preprocess_input, decode_predictions
import numpy as np

# load model
model = ResNet50(weights='imagenet') 
img_path = 'elephant.jpg'
img = image.load_img(img_path, target_size=(224, 224))
x = image.img_to_array(img)
x = np.expand_dims(x, axis=0)
x = preprocess_input(x) Copy
prediction = model.predict(x)
print('Predicted:', decode_predictions(prediction, top=5)[0]) 
from keras.models import Model
from keras.applications.vgg19 import VGG19

base_model = VGG19(weights='imagenet')
base_model.summary() Copy
model = Model(inputs=base_model.input, outputs=base_model.get_layer('block5_pool').output)
model.summary() 
block5_pool_features = model.predict(x)
block5_pool_features Copy
from keras.layers import Flatten, Dense, Dropout

base_model = VGG19(weights = "imagenet", include_top=False, input_shape = (256, 256, 3))

for layer in base_model.layers[:5]:
    layer.trainable = False

# Adding custom layers
x = base_model.output
x = Flatten()(x)
 x = Dense(2048, activation='relu')(x)
x = Dropout(0.3)(x)
x = Dense(1024, activation='relu')(x)
output = Dense(10, activation='softmax')(x)

model = Model(inputs=base_model.input, outputs=output)
model.summary() 
